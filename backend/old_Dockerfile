FROM python:3.12-slim

RUN apt-get update && apt-get install -y gcc redis-server postgresql-client curl \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

RUN curl -sSL https://install.python-poetry.org | python3 -

ENV PATH="${PATH}:/root/.local/bin"

WORKDIR /app

COPY . /app

RUN poetry config virtualenvs.in-project true && poetry install

EXPOSE 8000

CMD ["tail", "-f", "/dev/null"]









#
#
#
#
#FROM python:3.12
#
## Обновляем пакетный менеджер и устанавливаем необходимые зависимости
#RUN apt-get update && apt-get install -y gcc redis-server postgresql-client curl
#
## Устанавливаем Poetry
#RUN curl -sSL https://install.python-poetry.org | python3 -
#
## Добавляем Poetry в PATH
#ENV PATH="${PATH}:/root/.local/bin"
#
## Устанавливаем рабочую директорию
#WORKDIR /app
#
## Копируем все файлы проекта в рабочую директорию
#COPY . /app
#RUN poetry config virtualenvs.in-project true && poetry install
#
##ENV PATH="/app/.venv/bin:${PATH}"
#
## Экспонируем порт
#EXPOSE 8000
#CMD ["tail", "-f", "/dev/null"]
#
##CMD ["/bin/sh", "-c", " \
##  while ! PGPASSWORD=$APP_CONFIG__DATABASE__DB_PASSWORD psql -h \"$APP_CONFIG__DATABASE__DB_HOST\" -U \"$APP_CONFIG__DATABASE__DB_USER\" -d \"$APP_CONFIG__DATABASE__DB_NAME\" -c '\\q' > /dev/null 2>&1; do \
##    >&2 echo 'Postgres is unavailable - sleeping'; \
##    sleep 1; \
##  done; \
##  ls; \
##  >&2 echo 'Postgres is up - executing command'; \
##  poetry run python ./app/main.py"]